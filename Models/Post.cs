using Microsoft.AspNetCore.Identity;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using TheBlogProject.Enumerations;

namespace TheBlogProject.Models
{
    public class Post
    {
        //Identity - source properties & prevents duplicates
        public int Id { get; set; } //primary key - generally generated by Database
        public int BlogId { get; set; } //foreign key in Post - primary key in Blog
        public string BlogUserId { get; set; }

        //form properties
        [Required]
        [StringLength(75, ErrorMessage = "The {0} must be at least {2} and no more than {1} characters long.", MinimumLength = 2)]// 75 = maxlength - {0}:Property ; {2}:min; {1}:max
        public string Title { get; set; }

        [Required]
        [StringLength(200, ErrorMessage = "The {0} must be at least {2} and no more than {1} characters long.", MinimumLength = 2)]// 200 = maxlength - {0}:Property ; {2}:min; {1}:max
        public string Abstract { get; set; }

        [Required]
        public string Content { get; set; }//main body of post

        //DateTime
        [DataType(DataType.Date)]
        [Display(Name = "Created Date")]
        public DateTime Created { get; set; }

        [DataType(DataType.Date)]
        [Display(Name = "Updated Date")]
        public DateTime? Updated { get; set; }

        //post accessibility
        //public bool IsReady { get; set; }//ready to be publicly displayed
        public ReadyStatus ReadyStatus { get; set; }
        public string Slug { get; set; }//derived from title - Search Engine Optimization - custom routing

        //image
        public byte[] ImageData { get; set;}
        public string ContentType { get; set; }
        [NotMapped]
        public IFormFile Image { get; set; }

        //navigation properties
        public virtual Blog Blog { get; set; } //link BlogId & Blog - 1) gets BlogId value; 2) records value in Blog
        public virtual BlogUser BlogUser { get; set; } //link BlogUserId & BlogUser - post associated with author
        public virtual ICollection<Tag> Tags { get; set; } = new HashSet<Tag>();
        public virtual ICollection<Comment> Comments { get; set; } = new HashSet<Comment>();

    }
}
